# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/ts',
                'doc_host': 'https://Jha-Pranav.github.io',
                'git_url': 'https://github.com/Jha-Pranav/ts',
                'lib_path': 'ts'},
  'syms': { 'ts.benchmark.tsdataset': { 'ts.benchmark.tsdataset.TimeSeriesBenchmarkDataset': ( 'src/utils.benchmark.html#timeseriesbenchmarkdataset',
                                                                                               'ts/benchmark/tsdataset.py'),
                                        'ts.benchmark.tsdataset.TimeSeriesBenchmarkDataset.__init__': ( 'src/utils.benchmark.html#timeseriesbenchmarkdataset.__init__',
                                                                                                        'ts/benchmark/tsdataset.py'),
                                        'ts.benchmark.tsdataset.TimeSeriesBenchmarkDataset.get_datasets': ( 'src/utils.benchmark.html#timeseriesbenchmarkdataset.get_datasets',
                                                                                                            'ts/benchmark/tsdataset.py'),
                                        'ts.benchmark.tsdataset.TimeSeriesBenchmarkDataset.load_dataset': ( 'src/utils.benchmark.html#timeseriesbenchmarkdataset.load_dataset',
                                                                                                            'ts/benchmark/tsdataset.py'),
                                        'ts.benchmark.tsdataset.TimeSeriesBenchmarkDataset.to_long_format': ( 'src/utils.benchmark.html#timeseriesbenchmarkdataset.to_long_format',
                                                                                                              'ts/benchmark/tsdataset.py')},
            'ts.classification.main': {},
            'ts.classification.mlclassifier': {},
            'ts.classification.pre_process': {},
            'ts.commons.plot_forecast': { 'ts.commons.plot_forecast.mlp_dms': ( 'src/commons.plot.html#mlp_dms',
                                                                                'ts/commons/plot_forecast.py'),
                                          'ts.commons.plot_forecast.mlp_dms_singular': ( 'src/commons.plot.html#mlp_dms_singular',
                                                                                         'ts/commons/plot_forecast.py'),
                                          'ts.commons.plot_forecast.mlp_ims': ( 'src/commons.plot.html#mlp_ims',
                                                                                'ts/commons/plot_forecast.py'),
                                          'ts.commons.plot_forecast.mlp_ims_singular': ( 'src/commons.plot.html#mlp_ims_singular',
                                                                                         'ts/commons/plot_forecast.py')},
            'ts.commons.stats': { 'ts.commons.stats.ensure_tensor': ('src/commons.stats.html#ensure_tensor', 'ts/commons/stats.py'),
                                  'ts.commons.stats.extract_stats_features': ( 'src/commons.stats.html#extract_stats_features',
                                                                               'ts/commons/stats.py'),
                                  'ts.commons.stats.get_seasonality': ('src/commons.stats.html#get_seasonality', 'ts/commons/stats.py')},
            'ts.main': {},
            'ts.model.nbeats': {},
            'ts.models.dlinear': { 'ts.models.dlinear.SeriesDecompose': ( 'src/model.dlinear_robust.html#seriesdecompose',
                                                                          'ts/models/dlinear.py'),
                                   'ts.models.dlinear.SeriesDecompose.__init__': ( 'src/model.dlinear_robust.html#seriesdecompose.__init__',
                                                                                   'ts/models/dlinear.py'),
                                   'ts.models.dlinear.SeriesDecompose.forward': ( 'src/model.dlinear_robust.html#seriesdecompose.forward',
                                                                                  'ts/models/dlinear.py')},
            'ts.models.ltsf': { 'ts.models.ltsf.LTSF': ('src/model.baseline.html#ltsf', 'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.__init__': ('src/model.baseline.html#ltsf.__init__', 'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.configure_optimizers': ( 'src/model.baseline.html#ltsf.configure_optimizers',
                                                                              'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.forward': ('src/model.baseline.html#ltsf.forward', 'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.test_step': ('src/model.baseline.html#ltsf.test_step', 'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.training_step': ('src/model.baseline.html#ltsf.training_step', 'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.validation_step': ( 'src/model.baseline.html#ltsf.validation_step',
                                                                         'ts/models/ltsf.py')},
            'ts.models.nlinear': {},
            'ts.preprocess.dataloader': { 'ts.preprocess.dataloader.TSDataLoader': ( 'src/preprocess.dataloader.html#tsdataloader',
                                                                                     'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSDataLoader.__init__': ( 'src/preprocess.dataloader.html#tsdataloader.__init__',
                                                                                              'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSDataLoader.setup': ( 'src/preprocess.dataloader.html#tsdataloader.setup',
                                                                                           'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSDataLoader.test_dataloader': ( 'src/preprocess.dataloader.html#tsdataloader.test_dataloader',
                                                                                                     'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSDataLoader.train_dataloader': ( 'src/preprocess.dataloader.html#tsdataloader.train_dataloader',
                                                                                                      'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSDataLoader.val_dataloader': ( 'src/preprocess.dataloader.html#tsdataloader.val_dataloader',
                                                                                                    'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSRegressionDataset': ( 'src/preprocess.dataloader.html#tsregressiondataset',
                                                                                            'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSRegressionDataset.__getitem__': ( 'src/preprocess.dataloader.html#tsregressiondataset.__getitem__',
                                                                                                        'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSRegressionDataset.__init__': ( 'src/preprocess.dataloader.html#tsregressiondataset.__init__',
                                                                                                     'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSRegressionDataset.__len__': ( 'src/preprocess.dataloader.html#tsregressiondataset.__len__',
                                                                                                    'ts/preprocess/dataloader.py')},
            'ts.setup': {},
            'ts.tsfeatures.stats': {},
            'ts.tsfeatures.ts2image': { 'ts.tsfeatures.ts2image.plot_ts2img': ( 'src/tsfeatures.image.html#plot_ts2img',
                                                                                'ts/tsfeatures/ts2image.py'),
                                        'ts.tsfeatures.ts2image.transform_to_images': ( 'src/tsfeatures.image.html#transform_to_images',
                                                                                        'ts/tsfeatures/ts2image.py'),
                                        'ts.tsfeatures.ts2image.transform_ts2img_tensor': ( 'src/tsfeatures.image.html#transform_ts2img_tensor',
                                                                                            'ts/tsfeatures/ts2image.py')},
            'ts.utils': {'ts.utils.generate_time_series': ('src/utils.html#generate_time_series', 'ts/utils.py')}}}
