# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/ts',
                'doc_host': 'https://Jha-Pranav.github.io',
                'git_url': 'https://github.com/Jha-Pranav/ts',
                'lib_path': 'ts'},
  'syms': { 'ts.benchmark.cnn_classification': {},
            'ts.benchmark.tsdataset': { 'ts.benchmark.tsdataset.TimeSeriesBenchmarkDataset': ( 'utils/utils.benchmark.html#timeseriesbenchmarkdataset',
                                                                                               'ts/benchmark/tsdataset.py'),
                                        'ts.benchmark.tsdataset.TimeSeriesBenchmarkDataset.__init__': ( 'utils/utils.benchmark.html#timeseriesbenchmarkdataset.__init__',
                                                                                                        'ts/benchmark/tsdataset.py'),
                                        'ts.benchmark.tsdataset.TimeSeriesBenchmarkDataset.get_datasets': ( 'utils/utils.benchmark.html#timeseriesbenchmarkdataset.get_datasets',
                                                                                                            'ts/benchmark/tsdataset.py'),
                                        'ts.benchmark.tsdataset.TimeSeriesBenchmarkDataset.load_dataset': ( 'utils/utils.benchmark.html#timeseriesbenchmarkdataset.load_dataset',
                                                                                                            'ts/benchmark/tsdataset.py'),
                                        'ts.benchmark.tsdataset.TimeSeriesBenchmarkDataset.to_long_format': ( 'utils/utils.benchmark.html#timeseriesbenchmarkdataset.to_long_format',
                                                                                                              'ts/benchmark/tsdataset.py')},
            'ts.classification.cnnclassifer': { 'ts.classification.cnnclassifer.ChannelReducerAndDownscaler': ( 'classifications/classification.cnnclassifer.html#channelreduceranddownscaler',
                                                                                                                'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.ChannelReducerAndDownscaler.__init__': ( 'classifications/classification.cnnclassifer.html#channelreduceranddownscaler.__init__',
                                                                                                                         'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.ChannelReducerAndDownscaler.forward': ( 'classifications/classification.cnnclassifer.html#channelreduceranddownscaler.forward',
                                                                                                                        'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSImageClassifier': ( 'classifications/classification.cnnclassifer.html#tsimageclassifier',
                                                                                                      'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSImageClassifier.__init__': ( 'classifications/classification.cnnclassifer.html#tsimageclassifier.__init__',
                                                                                                               'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSImageClassifier._load_model': ( 'classifications/classification.cnnclassifer.html#tsimageclassifier._load_model',
                                                                                                                  'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSImageClassifier._modify_classifier': ( 'classifications/classification.cnnclassifer.html#tsimageclassifier._modify_classifier',
                                                                                                                         'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSImageClassifier.compute_metrics': ( 'classifications/classification.cnnclassifer.html#tsimageclassifier.compute_metrics',
                                                                                                                      'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSImageClassifier.configure_optimizers': ( 'classifications/classification.cnnclassifer.html#tsimageclassifier.configure_optimizers',
                                                                                                                           'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSImageClassifier.forward': ( 'classifications/classification.cnnclassifer.html#tsimageclassifier.forward',
                                                                                                              'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSImageClassifier.test_step': ( 'classifications/classification.cnnclassifer.html#tsimageclassifier.test_step',
                                                                                                                'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSImageClassifier.training_step': ( 'classifications/classification.cnnclassifer.html#tsimageclassifier.training_step',
                                                                                                                    'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSImageClassifier.validation_step': ( 'classifications/classification.cnnclassifer.html#tsimageclassifier.validation_step',
                                                                                                                      'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSNDTensorClassifier': ( 'classifications/classification.cnnclassifer.html#tsndtensorclassifier',
                                                                                                         'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSNDTensorClassifier.__init__': ( 'classifications/classification.cnnclassifer.html#tsndtensorclassifier.__init__',
                                                                                                                  'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSNDTensorClassifier._initialize_weights': ( 'classifications/classification.cnnclassifer.html#tsndtensorclassifier._initialize_weights',
                                                                                                                             'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSNDTensorClassifier._load_model': ( 'classifications/classification.cnnclassifer.html#tsndtensorclassifier._load_model',
                                                                                                                     'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSNDTensorClassifier._modify_classifier': ( 'classifications/classification.cnnclassifer.html#tsndtensorclassifier._modify_classifier',
                                                                                                                            'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSNDTensorClassifier.compute_metrics': ( 'classifications/classification.cnnclassifer.html#tsndtensorclassifier.compute_metrics',
                                                                                                                         'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSNDTensorClassifier.configure_optimizers': ( 'classifications/classification.cnnclassifer.html#tsndtensorclassifier.configure_optimizers',
                                                                                                                              'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSNDTensorClassifier.forward': ( 'classifications/classification.cnnclassifer.html#tsndtensorclassifier.forward',
                                                                                                                 'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSNDTensorClassifier.test_step': ( 'classifications/classification.cnnclassifer.html#tsndtensorclassifier.test_step',
                                                                                                                   'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSNDTensorClassifier.training_step': ( 'classifications/classification.cnnclassifer.html#tsndtensorclassifier.training_step',
                                                                                                                       'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TSNDTensorClassifier.validation_step': ( 'classifications/classification.cnnclassifer.html#tsndtensorclassifier.validation_step',
                                                                                                                         'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesDataModule': ( 'classifications/classification.cnnclassifer.html#timeseriesdatamodule',
                                                                                                         'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesDataModule.__init__': ( 'classifications/classification.cnnclassifer.html#timeseriesdatamodule.__init__',
                                                                                                                  'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesDataModule.setup': ( 'classifications/classification.cnnclassifer.html#timeseriesdatamodule.setup',
                                                                                                               'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesDataModule.test_dataloader': ( 'classifications/classification.cnnclassifer.html#timeseriesdatamodule.test_dataloader',
                                                                                                                         'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesDataModule.train_dataloader': ( 'classifications/classification.cnnclassifer.html#timeseriesdatamodule.train_dataloader',
                                                                                                                          'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesDataModule.val_dataloader': ( 'classifications/classification.cnnclassifer.html#timeseriesdatamodule.val_dataloader',
                                                                                                                        'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesDataset': ( 'classifications/classification.cnnclassifer.html#timeseriesdataset',
                                                                                                      'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesDataset.__getitem__': ( 'classifications/classification.cnnclassifer.html#timeseriesdataset.__getitem__',
                                                                                                                  'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesDataset.__init__': ( 'classifications/classification.cnnclassifer.html#timeseriesdataset.__init__',
                                                                                                               'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesDataset.__len__': ( 'classifications/classification.cnnclassifer.html#timeseriesdataset.__len__',
                                                                                                              'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesImageDataset': ( 'classifications/classification.cnnclassifer.html#timeseriesimagedataset',
                                                                                                           'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesImageDataset.__getitem__': ( 'classifications/classification.cnnclassifer.html#timeseriesimagedataset.__getitem__',
                                                                                                                       'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesImageDataset.__init__': ( 'classifications/classification.cnnclassifer.html#timeseriesimagedataset.__init__',
                                                                                                                    'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesImageDataset.__len__': ( 'classifications/classification.cnnclassifer.html#timeseriesimagedataset.__len__',
                                                                                                                   'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesImageDataset.default_transform': ( 'classifications/classification.cnnclassifer.html#timeseriesimagedataset.default_transform',
                                                                                                                             'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.TimeSeriesImageDataset.load_labels': ( 'classifications/classification.cnnclassifer.html#timeseriesimagedataset.load_labels',
                                                                                                                       'ts/classification/cnnclassifer.py'),
                                                'ts.classification.cnnclassifer.compute_conv_params': ( 'classifications/classification.cnnclassifer.html#compute_conv_params',
                                                                                                        'ts/classification/cnnclassifer.py')},
            'ts.classification.main': {},
            'ts.classification.mlclassifier': {},
            'ts.classification.pre_process': {},
            'ts.commons.plot_forecast': { 'ts.commons.plot_forecast.mlp_dms': ( 'commons/commons.plot.html#mlp_dms',
                                                                                'ts/commons/plot_forecast.py'),
                                          'ts.commons.plot_forecast.mlp_dms_singular': ( 'commons/commons.plot.html#mlp_dms_singular',
                                                                                         'ts/commons/plot_forecast.py'),
                                          'ts.commons.plot_forecast.mlp_ims': ( 'commons/commons.plot.html#mlp_ims',
                                                                                'ts/commons/plot_forecast.py'),
                                          'ts.commons.plot_forecast.mlp_ims_singular': ( 'commons/commons.plot.html#mlp_ims_singular',
                                                                                         'ts/commons/plot_forecast.py')},
            'ts.commons.stats': { 'ts.commons.stats.ensure_tensor': ('commons/commons.stats.html#ensure_tensor', 'ts/commons/stats.py'),
                                  'ts.commons.stats.extract_stats_features': ( 'commons/commons.stats.html#extract_stats_features',
                                                                               'ts/commons/stats.py'),
                                  'ts.commons.stats.get_seasonality': ( 'commons/commons.stats.html#get_seasonality',
                                                                        'ts/commons/stats.py')},
            'ts.main': {},
            'ts.model.nbeats': {},
            'ts.models.dlinear': { 'ts.models.dlinear.SeriesDecompose': ( 'models/model.dlinear_robust.html#seriesdecompose',
                                                                          'ts/models/dlinear.py'),
                                   'ts.models.dlinear.SeriesDecompose.__init__': ( 'models/model.dlinear_robust.html#seriesdecompose.__init__',
                                                                                   'ts/models/dlinear.py'),
                                   'ts.models.dlinear.SeriesDecompose.forward': ( 'models/model.dlinear_robust.html#seriesdecompose.forward',
                                                                                  'ts/models/dlinear.py')},
            'ts.models.ltsf': { 'ts.models.ltsf.LTSF': ('models/model.baseline.html#ltsf', 'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.__init__': ('models/model.baseline.html#ltsf.__init__', 'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.configure_optimizers': ( 'models/model.baseline.html#ltsf.configure_optimizers',
                                                                              'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.forward': ('models/model.baseline.html#ltsf.forward', 'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.test_step': ('models/model.baseline.html#ltsf.test_step', 'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.training_step': ('models/model.baseline.html#ltsf.training_step', 'ts/models/ltsf.py'),
                                'ts.models.ltsf.LTSF.validation_step': ( 'models/model.baseline.html#ltsf.validation_step',
                                                                         'ts/models/ltsf.py')},
            'ts.models.nlinear': {},
            'ts.preprocess.dataloader': { 'ts.preprocess.dataloader.TSDataLoader': ( 'utils/preprocess.dataloader.html#tsdataloader',
                                                                                     'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSDataLoader.__init__': ( 'utils/preprocess.dataloader.html#tsdataloader.__init__',
                                                                                              'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSDataLoader.setup': ( 'utils/preprocess.dataloader.html#tsdataloader.setup',
                                                                                           'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSDataLoader.test_dataloader': ( 'utils/preprocess.dataloader.html#tsdataloader.test_dataloader',
                                                                                                     'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSDataLoader.train_dataloader': ( 'utils/preprocess.dataloader.html#tsdataloader.train_dataloader',
                                                                                                      'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSDataLoader.val_dataloader': ( 'utils/preprocess.dataloader.html#tsdataloader.val_dataloader',
                                                                                                    'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSRegressionDataset': ( 'utils/preprocess.dataloader.html#tsregressiondataset',
                                                                                            'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSRegressionDataset.__getitem__': ( 'utils/preprocess.dataloader.html#tsregressiondataset.__getitem__',
                                                                                                        'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSRegressionDataset.__init__': ( 'utils/preprocess.dataloader.html#tsregressiondataset.__init__',
                                                                                                     'ts/preprocess/dataloader.py'),
                                          'ts.preprocess.dataloader.TSRegressionDataset.__len__': ( 'utils/preprocess.dataloader.html#tsregressiondataset.__len__',
                                                                                                    'ts/preprocess/dataloader.py')},
            'ts.setup': {},
            'ts.tsfeatures.stats': {},
            'ts.tsfeatures.ts2image': { 'ts.tsfeatures.ts2image.plot_ts2img': ( 'tsfeatures/tsfeatures.image.html#plot_ts2img',
                                                                                'ts/tsfeatures/ts2image.py'),
                                        'ts.tsfeatures.ts2image.transform_tensor2img': ( 'tsfeatures/tsfeatures.image.html#transform_tensor2img',
                                                                                         'ts/tsfeatures/ts2image.py'),
                                        'ts.tsfeatures.ts2image.transform_to_images': ( 'tsfeatures/tsfeatures.image.html#transform_to_images',
                                                                                        'ts/tsfeatures/ts2image.py'),
                                        'ts.tsfeatures.ts2image.transform_ts2img_tensor': ( 'tsfeatures/tsfeatures.image.html#transform_ts2img_tensor',
                                                                                            'ts/tsfeatures/ts2image.py')},
            'ts.utils': {'ts.utils.generate_time_series': ('utils/utils.html#generate_time_series', 'ts/utils.py')}}}
