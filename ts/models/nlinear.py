# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/src/model.nlinear.ipynb.

# %% auto 0
__all__ = ["device", "SeriesDecompose"]

# %% ../../nbs/src/model.nlinear.ipynb 2
import pandas as pd
import pytorch_lightning as pl
import torch
import torch.nn as nn

# %% ../../nbs/src/model.nlinear.ipynb 3
device = "cuda" if torch.cuda.is_available() else "mps" if torch.mps.is_available() else "cpu"


# %% ../../nbs/src/model.nlinear.ipynb 5
class SeriesDecompose(nn.Module):
    def __init__(self, kernel_size):
        super(SeriesDecompose, self).__init__()
        self.kernel_size = kernel_size
        self.avg = nn.AvgPool1d(kernel_size=kernel_size, stride=1, padding=0)

    def forward(self, x):
        if x.dim() == 3:  # If input is 3D (batch, features, seq_len)
            batch, features, seq_len = x.shape
            x = x.view(batch, features * seq_len)

        # apply padding to keep the result to be of same size
        x_padded = torch.cat(
            [
                x[:, 0:1].repeat(1, (self.kernel_size - 1) // 2),
                x,
                x[:, -1:].repeat(1, (self.kernel_size - 1) // 2),
            ],
            dim=1,
        )
        moving_avg = self.avg(x_padded)  # .squeeze(1)

        residual = x - moving_avg
        return moving_avg, residual
