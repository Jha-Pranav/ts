# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/src/tsfeatures.image.ipynb.

# %% auto 0
__all__ = ["transform_to_images", "plot_ts2img"]

import json
import os
import warnings
from datetime import datetime, timedelta

import lightning.pytorch as pl

# %% ../../nbs/src/tsfeatures.image.ipynb 1
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import torch
import torch.nn as nn
from plotly.subplots import make_subplots
from pyts.image import GramianAngularField, MarkovTransitionField, RecurrencePlot
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from torch.utils.data import DataLoader, Dataset, Subset, random_split

warnings.simplefilter("ignore", category=UserWarning)
from tqdm import tqdm

tqdm.pandas()
torch.set_float32_matmul_precision("medium")


# %% ../../nbs/src/tsfeatures.image.ipynb 2
def transform_to_images(ts_series):
    ts_series = ts_series.dropna().values  # Drop NaNs safely
    ts_series = ts_series.reshape(-1, 1)  # Reshape for pyts compatibility

    # Apply MinMax Scaling
    scaler = MinMaxScaler(feature_range=(0, 1))
    ts_series = scaler.fit_transform(ts_series).reshape(1, -1)

    # Generate images
    rp = RecurrencePlot().fit_transform(ts_series)[0]  # RP Image
    gaf = GramianAngularField(method="summation").fit_transform(ts_series)[0]  # GAF Image
    mtf = MarkovTransitionField().fit_transform(ts_series)[0]  # MTF Image

    return torch.stack(
        [
            torch.tensor(rp, dtype=torch.float32),
            torch.tensor(gaf, dtype=torch.float32),
            torch.tensor(mtf, dtype=torch.float32),
        ]
    )


# %% ../../nbs/src/tsfeatures.image.ipynb 3
def plot_ts2img(ts_series):
    timestamps = ts_series.index
    rp_image, gaf_image, mtf_image = transform_to_images(ts_series)

    # Create RGB composite image
    rgb_image = torch.stack([rp_image, gaf_image, mtf_image]).permute(1, 2, 0).numpy()  # (H, W, 3)

    # Normalize RGB image to [0, 1] for visualization
    rgb_image = (rgb_image - rgb_image.min()) / (rgb_image.max() - rgb_image.min())

    # Create subplots (3 rows, 2 columns)
    fig = make_subplots(
        rows=3,
        cols=2,
        subplot_titles=[
            "Original Time Series",
            "Combined RGB Image",
            "Gramian Angular Field (GAF)",
            "Markov Transition Field (MTF)",
            "Recurrence Plot (RP)",
        ],
    )

    # ðŸŸ¢ Plot Time Series (Top-Left)
    fig.add_trace(
        go.Scatter(
            x=timestamps,
            y=ts_series,
            mode="lines+markers",
            line=dict(color="blue"),
            name="Time Series",
        ),
        row=1,
        col=1,
    )

    # ðŸ”µ Plot Recurrence Plot (RP) (Top-Right)
    fig.add_trace(
        go.Heatmap(z=rp_image.numpy(), colorscale="gray", name="Recurrence Plot", showscale=False),
        row=3,
        col=1,
    )

    # ðŸŸ  Plot Gramian Angular Field (GAF) (Middle-Left)
    fig.add_trace(
        go.Heatmap(
            z=gaf_image.numpy(), colorscale="gray", name="Gramian Angular Field", showscale=False
        ),
        row=2,
        col=1,
    )

    # ðŸ”´ Plot Markov Transition Field (MTF) (Middle-Right)
    fig.add_trace(
        go.Heatmap(
            z=mtf_image.numpy(), colorscale="gray", name="Markov Transition Field", showscale=False
        ),
        row=2,
        col=2,
    )

    # ðŸŒˆ Plot RGB Composite Image (Bottom-Center)
    fig.add_trace(
        go.Heatmap(
            z=rgb_image[:, :, 0],  # Use the red channel as intensity
            colorscale="rainbow",
            name="RGB Composite",
            showscale=False,
        ),
        row=1,
        col=2,
    )

    # Customize layout
    fig.update_layout(
        title_text="Time Series & Image Transformations", height=1000, width=1200, showlegend=False
    )

    fig.show()
