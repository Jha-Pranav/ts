# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/deepdive/series_decompostion.ipynb.

# %% auto 0
__all__ = ['perform_fft_analysis', 'plot_fft_results']

# %% ../../nbs/deepdive/series_decompostion.ipynb 8
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from scipy import fftpack
from sklearn.linear_model import LinearRegression

# Function to perform FFT analysis and return results


def perform_fft_analysis(df, column_name):
    # Extract series
    y = df[column_name].values
    n = len(y)
    t = np.arange(n).reshape(-1, 1)  # Reshape for sklearn (n_samples, n_features)

    # Detrend with sklearn LinearRegression
    model = LinearRegression()
    model.fit(t, y)
    trend = model.predict(t)
    y_detrended = y - trend

    # Perform Fourier transform on detrended series
    y_fft = fftpack.fft(y_detrended)

    # Frequency domain
    freqs = fftpack.fftfreq(n)  # Cycles per sample
    y_m = np.abs(y_fft)

    # Positive frequencies (exclude DC)
    positive_mask = freqs > 0
    freqs_pos = freqs[positive_mask]
    mags_pos = y_m[positive_mask]

    # Convert to periods
    periods = 1 / freqs_pos
    periods = np.round(periods, 2)

    # Find dominant period
    max_mag_idx = np.argmax(mags_pos)
    dominant_period = periods[max_mag_idx]
    dominant_freq = freqs_pos[max_mag_idx]
    dominant_mag = mags_pos[max_mag_idx]

    return {
        "y": y,
        "y_detrended": y_detrended,
        "freqs_pos": freqs_pos,
        "mags_pos": mags_pos,
        "periods": periods,
        "dominant_period": dominant_period,
        "dominant_freq": dominant_freq,
        "dominant_mag": dominant_mag,
        "trend": trend,
    }


# Function to plot FFT analysis results


def plot_fft_results(fft_results):
    y = fft_results["y"]
    y_detrended = fft_results["y_detrended"]
    freqs_pos = fft_results["freqs_pos"]
    mags_pos = fft_results["mags_pos"]
    periods = fft_results["periods"]
    dominant_period = fft_results["dominant_period"]
    dominant_freq = fft_results["dominant_freq"]
    dominant_mag = fft_results["dominant_mag"]
    trend = fft_results["trend"]

    # Plot
    fig = make_subplots(
        rows=2,
        cols=2,
        subplot_titles=(
            "Original Time Series",
            "Detrended Time Series",
            "Original FFT",
            "Detrended FFT",
        ),
        shared_yaxes=False,
        vertical_spacing=0.15,
    )

    # Original time series
    fig.add_trace(
        go.Scatter(
            x=np.arange(len(y)), y=y, mode="lines", name="Original", line=dict(color="blue")
        ),
        row=1,
        col=1,
    )

    # Detrended time series
    fig.add_trace(
        go.Scatter(
            x=np.arange(len(y_detrended)),
            y=y_detrended,
            mode="lines",
            name="Detrended",
            line=dict(color="blue"),
        ),
        row=1,
        col=2,
    )
    fig.add_trace(
        go.Scatter(
            x=np.arange(len(trend)), y=trend, mode="lines", name="Trend", line=dict(color="blue")
        ),
        row=1,
        col=1,
    )

    # Original FFT
    fig.add_trace(
        go.Scatter(
            x=freqs_pos,
            y=mags_pos,
            mode="markers+lines",
            name="Orig. Magnitude",
            marker=dict(color="red", size=8),
            line=dict(width=0),
        ),
        row=2,
        col=1,
    )

    # Detrended FFT with hover showing periods
    fig.add_trace(
        go.Scatter(
            x=freqs_pos,
            y=mags_pos,
            mode="markers+lines",
            name="Detrended Magnitude",
            marker=dict(color="red", size=8),
            line=dict(width=0),
            customdata=periods,
            hovertemplate="Freq: %{x:.4f}<br>Mag: %{y:.2f}<br>Period: %{customdata:.2f}",
        ),
        row=2,
        col=2,
    )

    # Highlight dominant frequency
    fig.add_trace(
        go.Scatter(
            x=[dominant_freq],
            y=[dominant_mag],
            mode="markers",
            marker=dict(color="green", size=12, symbol="star"),
            name=f"Period {dominant_period}",
        ),
        row=2,
        col=2,
    )

    # Update layout
    fig.update_layout(
        title_text=f"FFT Analysis with sklearn Detrending: Dominant Period = {dominant_period} samples",
        height=600,
        width=1200,
        showlegend=True,
    )

    # Update axes
    fig.update_xaxes(title_text="Time (Samples)", row=1, col=1)
    fig.update_xaxes(title_text="Time (Samples)", row=1, col=2)
    fig.update_xaxes(title_text="Frequency (Cycles/Sample)", row=2, col=1)
    fig.update_xaxes(title_text="Frequency (Cycles/Sample)", row=2, col=2)
    fig.update_yaxes(title_text="Amplitude", row=1, col=1)
    fig.update_yaxes(title_text="Amplitude", row=1, col=2)
    fig.update_yaxes(title_text="Magnitude", row=2, col=1)
    fig.update_yaxes(title_text="Magnitude", row=2, col=2)

    fig.show()


# # Example usage:

# # Assuming you have a DataFrame `df` with a column "y"
# # Perform FFT analysis
# fft_results = perform_fft_analysis(df, "y")

# # Plot the FFT results
# plot_fft_results(fft_results)
